# This chunk ensures that the reedtemplates package is
# installed and loaded. This reedtemplates package includes
# the template files for the thesis and also two functions
# used for labeling and referencing
if(!require(devtools))
install.packages("devtools", repos = "http://cran.rstudio.com")
if(!require(reedtemplates)){
library(devtools)
devtools::install_github("ismayc/reedtemplates")
}
library(reedtemplates)
# This chunk ensures that the reedtemplates package is
# installed and loaded. This reedtemplates package includes
# the template files for the thesis and also two functions
# used for labeling and referencing
if(!require(devtools))
install.packages("devtools", repos = "http://cran.rstudio.com")
if(!require(reedtemplates)){
library(devtools)
devtools::install_github("ismayc/reedtemplates")
}
library(reedtemplates)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(ggfortify)
library(matrixcalc)
library(zeallot)
library(RMThreshold)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/eigenmetrics.R")
bool_plot <- F
M <- 20
set.seed(1)
P <- rand_M_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = T, "Stochastic")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_symm_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = T, "Symmetric Stochastic")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_symm_norm(M, mu = 0, sd = 1)
if(bool_plot){eigen_plot(P, loud = F, "Normal Symmetric")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_trid(M)
if(bool_plot){eigen_plot(P, loud = F, "Tridiagonal")}
eigen_summary(eigen_frame(P))
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(ggfortify)
library(matrixcalc)
library(zeallot)
library(RMThreshold)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/eigenmetrics.R")
bool_plot <- F
bool_loud <-
M <- 20
set.seed(1)
P <- rand_M_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Stochastic")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_symm_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Symmetric Stochastic")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_symm_norm(M, mu = 0, sd = 1)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Normal Symmetric")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_trid(M)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Tridiagonal")}
eigen_summary(eigen_frame(P))
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(ggfortify)
library(matrixcalc)
library(zeallot)
library(RMThreshold)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/eigenmetrics.R")
bool_plot <- F
bool_loud <- F
M <- 20
set.seed(1)
P <- rand_M_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Stochastic")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_symm_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Symmetric Stochastic")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_symm_norm(M, mu = 0, sd = 1)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Normal Symmetric")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_trid(M)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Tridiagonal")}
eigen_summary(eigen_frame(P))
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(ggfortify)
library(matrixcalc)
library(zeallot)
library(RMThreshold)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/eigenmetrics.R")
bool_plot <- F
bool_loud <- F
M <- 20
set.seed(1)
P <- rand_M_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Stochastic")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_symm_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Symmetric Stochastic")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_symm_norm(M, mu = 0, sd = 1)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Normal Symmetric")}
eigen_summary(eigen_frame(P))
set.seed(23)
P <- rand_M_trid(M)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Tridiagonal")}
eigen_summary(eigen_frame(P))
RMThreshold::rm.ev.density(eigenvalues = eigen(P)[1])
P
eigen(P)[1]
RMThreshold::rm.ev.density(eigenvalues = eigen(P)[1]$values)
evs <= eigen(P)[1]$values
evs <- eigen(P)[1]$values
RMThreshold::rm.ev.density(evs)
RMThreshold::rm.ev.density(evs)
evs <- eigen(P)[1]$values
RMThreshold::rm.spacing.distribution(evs)
RMThreshold::rm.ev.density(evs)
source('~/Developer/thesis-taqi/code/R/eigenmetrics.R')
rmt_summary(P)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(ggfortify)
library(matrixcalc)
library(zeallot)
library(RMThreshold)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/eigenmetrics.R")
bool_plot <- F
bool_loud <- F
M <- 20
set.seed(1)
P <- rand_M_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Stochastic")}
eigen_summary(eigen_frame(P))
rmt_summary(P)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(ggfortify)
library(matrixcalc)
library(zeallot)
library(RMThreshold)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/eigenmetrics.R")
bool_plot <- T
bool_loud <- F
M <- 20
set.seed(1)
P <- rand_M_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Stochastic")}
eigen_summary(eigen_frame(P))
rmt_summary(P)
rmt_summary(P)
rmt_summary(P)
rmt_summary(P)
rm.spacing.distribution(P)
rm.spacing.distribution(P)
rm.spacing.distribution(P)
rm.spacing.distribution(P)
evs <- eigen(P)[1]$values
RMThreshold::rm.spacing.distribution(evs)
evs <- eigen(P)[1]$values
RMThreshold::rm.spacing.distribution(evs)
evs
set.seed(12)
P <- rand_M_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Stochastic")}
eigen_summary(eigen_frame(P))
evs <- eigen(P)[1]$values
RMThreshold::rm.spacing.distribution(evs)
evs <- eigen(P)[1]$values
RMThreshold::rm.spacing.distribution(evs)
evs <- eigen(P)[1]$values
RMThreshold::rm.ev.density(evs)
evs <- eigen(P)[1]$values
RMThreshold::rm.ev.density(evs)
rmt_summary(P)
eigen_summary(eigen_frame(P))
rmt_summary(P)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(ggfortify)
library(matrixcalc)
library(zeallot)
library(RMThreshold)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/eigenmetrics.R")
bool_plot <- T
bool_loud <- F
M <- 20
set.seed(12)
P <- rand_M_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Stochastic")}
eigen_summary(eigen_frame(P))
evs <- eigen(P)[1]$values
RMThreshold::rm.ev.density(evs)
evs <- eigen(P)[1]$values
RMThreshold::rm.ev.density(evs)
rmt_summary(P)
source('~/Developer/thesis-taqi/code/R/eigenmetrics.R')
rmt_summary(P)
rmt_summary(P)
set.seed(23)
P <- rand_M_symm_norm(M, mu = 0, sd = 1)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Normal Symmetric")}
rmt_summary(P)
set.seed(12)
P <- rand_M_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Stochastic")}
set.seed(23)
P <- rand_M_symm_stoch(M, row_fn = r_zeros)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Symmetric Stochastic")}
eigen_summary(eigen_frame(P))
rmt_summary(P)
source('~/Developer/thesis-taqi/code/R/eigenmetrics.R')
rmt_summary(P)
rmt_summary(P)
set.seed(23)
P <- rand_M_trid(M)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Tridiagonal")}
set.seed(23)
P <- rand_M_trid(M)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Tridiagonal")}
eigen_summary(eigen_frame(P))
rmt_summary(P)
source('~/Developer/thesis-taqi/code/R/by_matrix.R')
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(ggfortify)
library(matrixcalc)
library(zeallot)
# Load files
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/eigenmetrics.R")
source(file = "R/by_matrix.R")
set.seed(23)
symm_stoch(M)
symm_stoch(M)
symm_stoch(M)
symm_stoch(M)
source('~/Developer/thesis-taqi/code/R/by_matrix.R')
set.seed(23)
symm_stoch(M)
symm_stoch(M)
symm_stoch(M)
unlink('~/Developer/thesis-taqi/code/by-matrix_cache', recursive = TRUE)
