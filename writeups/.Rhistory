source('~/Developer/thesis-taqi/R/simulate.R')
batch_2d_customplot(batch_data = time_array(batch_data1, at_time = 0), 1,2)
################################
### Step 0: Setup the matrix ###
################################
# Set seed
set.seed(23)
# Set parameters
M <- 4
# Generate matrix
P <- RM_stoch(M, symm = T, sparsity = F)
if(bool_loud){P}
################################
#### Step 1: Get the batch ####
################################
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
if(bool_loud){head(batch)}
##################################
#### Step 2: Evolve the batch ####
##################################
# Set evolution parameters
steps <- 10
# Evolve and index batch
evolved_batch <- evolve_batch(batch, steps, with_steps = T)
# Index the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
if(bool_loud){head(evolved_batch)}
####################################
#### Step 3: Animate the batch! ####
####################################
# Plot the evolution arrays of the batch elements
batch_data1 <- evolved_batch
batch_scatterplot1 <- batch_2d_plot(batch_data1)
# Add transition time
batch_animation1 <- batch_scatterplot1 + transition_time(time = time)
# Set me to true!
bool_animate <- T
if(bool_animate){batch_animation1}
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigenvectors.R")
source(file = "../R/simulate.R")
source(file = "../R/analyze.R")
eigen(P)$values
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigenvectors.R")
source(file = "../R/simulate.R")
source(file = "../R/analyze.R")
# global parameters
bool_plot <- T
bool_loud <- T
bool_animate <- F
set.seed(23)
P <- RM_normal(4, normal_args = c(0,1), symm = T)
batch<- run_batch(P, B = 10000, steps = 20)
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigenvectors.R")
source(file = "../R/simulate.R")
source(file = "../R/analyze.R")
# global parameters
bool_plot <- T
bool_loud <- T
bool_animate <- F
set.seed(23)
P <- RM_normal(4, normal_args = c(0,1), symm = T)
batch<- run_batch(P, B = 1000, steps = 20)
eigen(P)$values
final <- time_array(batch, at_time = 20)
final
M <- 4
ratios <- batch[,5:10]
#ggplot() + geom_point(data=ratios, aes(x=time, y= r_x1, color = element_index))
#ggplot() + geom_point(data=ratios, aes(x=time, y= r_x2, color = element_index))
#ggplot() + geom_point(data=ratios, aes(x=time, y= r_x3, color = element_index))
#ggplot() + geom_point(data=ratios, aes(x=time, y= r_x4, color = element_index))
ggplot() + geom_histogram(data=ratios, aes(x= r_x1, fill = time)) +xlim(c(-13,13))
ggplot() + geom_histogram(data=ratios, aes(x= r_x2, fill = time)) +xlim(c(-13,13))
ggplot() + geom_histogram(data=ratios, aes(x= r_x3, fill = time)) +xlim(c(-13,13))
ggplot() + geom_histogram(data=ratios, aes(x= r_x4, fill = time)) +xlim(c(-13,13))
View(final)
View(fully_evolved)
View(evolved_batch)
View(batch_data1)
View(ratios)
View(final)
ggplot() + geom_histogram(data=ratios, aes(x= r_x1, fill = time)) +xlim(c(-13,13)) + geom_vline(xintercept = 2.66059061)
ggplot() + geom_histogram(data=ratios, aes(x= r_x2, fill = time)) +xlim(c(-13,13))
ggplot() + geom_histogram(data=ratios, aes(x= r_x3, fill = time)) +xlim(c(-13,13))
ggplot() + geom_histogram(data=ratios, aes(x= r_x4, fill = time)) +xlim(c(-13,13))
ggplot() + geom_point(data=ratios, aes(x=time, y= r_x1, color = element_index))
#ggplot() + geom_point(data=ratios, aes(x=time, y= r_x2, color = element_index))
#ggplot() + geom_point(data=ratios, aes(x=time, y= r_x3, color = element_index))
#ggplot() + geom_point(data=ratios, aes(x=time, y= r_x4, color = element_index))
ggplot() + geom_point(data=ratios, aes(x=time, y= r_x1, color = element_index))
ggplot() + geom_point(data=ratios, aes(x=time, y= r_x2, color = element_index))
ggplot() + geom_point(data=ratios, aes(x=time, y= r_x3, color = element_index))
ggplot() + geom_point(data=ratios, aes(x=time, y= r_x4, color = element_index))
View(batch)
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(gganimate)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigenvectors.R")
source(file = "../R/simulate.R")
source(file = "../R/analyze.R")
# global parameters
bool_plot <- T
bool_loud <- T
bool_animate <- F
# General function
evl_erdos <- function(M,p,it){
# Generate initial matrix
set.seed(23)
P <- RM_erdos(M, p_sparse = p, stoch = T)
evals <- eval_frame(P)
# Attach p index
p_sparsity <- rep(as.factor(p), M)
# Main loop
evl_stack <- cbind(evals, p_sparsity)
for(i in 1:it){
P <- RM_erdos(4, p_sparse = p, stoch = T)
evl_stack <- rbind(evl_stack, cbind(eval_frame(P), p_sparsity))
}
evl_stack
}
## OVERWRITE FUNCTION
# Plots the eigenvalues of a given matrix P
eval_plot <- function(P, mat_type=""){
# Check if we have a stack or singular matrix
if(nrow(P) == ncol(P)){
array <- eval_frame(P)
} else{
array <- P
}
# Plot parameters
r <- 1
r_ep <- r + 0.5
# Plot
ggplot(array) +
geom_point(aes(x = Re, y = Im, col = as.factor(p_sparsity))) +
labs(x = "Re", y = "Im", title = paste("Eigenvalues of ",mat_type," Matrix",sep = "")) +
xlim(-r_ep,r_ep) + ylim(-r,r) +
ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = r), color = "steelblue") +
scale_color_discrete(name = "Row_i") +
scale_x_continuous(name = "Re(r_i)") +
scale_y_continuous(name = "Im(r_i)") +
coord_fixed(ratio = 1) +
theme(legend.position = "none")
}
# Document parameters
M <- 4
it <- 1500
# Get initial stack for p = 0.9
stack <- evl_erdos(M, 0.99, it)
# Iteratively stack various probabilities
stack <- rbind(stack, evl_erdos(M, 0.98, it))
stack <- rbind(stack, evl_erdos(M, 0.95, it))
stack <- rbind(stack, evl_erdos(M, 0.9, it))
stack <- rbind(stack, evl_erdos(M, 0.8, it))
stack <- rbind(stack, evl_erdos(M, 0.7, it))
stack <- rbind(stack, evl_erdos(M, 0.5, it))
stack <- rbind(stack, evl_erdos(M, 0.3, it))
stack <- rbind(stack, evl_erdos(M, 0.1, it))
stack <- rbind(stack, evl_erdos(M, 0.05, it))
stack <- rbind(stack, evl_erdos(M, 0.03, it))
stack <- rbind(stack, evl_erdos(M, 0.01, it))
eval_scatter <- eval_plot(stack, mat_type = "Erdos-Renyi")
eval_hist <- ggplot(data = stack) +
geom_histogram(mapping = aes(x = Re, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Real Component of Eigenvalues of ER Matrices")
eval_hist
#write_csv(stack, "erdos_renyi.csv")
#eval_scatter
#eval_scatter + transition_states(states = p_sparsity)
# Filter eigenvalues with noncomplex components
filtered <- stack[abs(stack[,1]) > 0,]
# Filter eigenvalues with  nonreal components
filtered <- filtered[abs(filtered[,2]) >= 0,]
eval_hist1 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Re, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Real Component of Mixed Eigenvalues of ER Matrices")
eval_hist2 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Im, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Complex Component of Mixed Eigenvalues of ER Matrices")
eval_hist1/eval_hist2
eval_hist1 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Re, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Real Component of Nontrivial Eigenvalues")
eval_hist2 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Im, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Complex Component of Nontrivial Eigenvalues")
eval_hist1/eval_hist2
eval_hist1 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Re, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Real Component of Nontrivial Eigenvalues")
eval_hist2 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Im, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Complex Component of Nontrivial Eigenvalues")
eval_hist1/eval_hist2
# Filter eigenvalues with noncomplex components
filtered <- stack[abs(stack[,1]) > 0,]
filtered <- stack[abs(stack[,1]) != 1,]
eval_hist1 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Re, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Real Component of Nontrivial Eigenvalues")
eval_hist2 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Im, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Complex Component of Nontrivial Eigenvalues")
eval_hist1/eval_hist2
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(gganimate)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigenvectors.R")
source(file = "../R/simulate.R")
source(file = "../R/analyze.R")
# global parameters
bool_plot <- T
bool_loud <- T
bool_animate <- F
# General function
evl_erdos <- function(M,p,it){
# Generate initial matrix
set.seed(23)
P <- RM_erdos(M, p_sparse = p, stoch = T)
evals <- eval_frame(P)
# Attach p index
p_sparsity <- rep(as.factor(p), M)
# Main loop
evl_stack <- cbind(evals, p_sparsity)
for(i in 1:it){
P <- RM_erdos(4, p_sparse = p, stoch = T)
evl_stack <- rbind(evl_stack, cbind(eval_frame(P), p_sparsity))
}
evl_stack
}
## OVERWRITE FUNCTION
# Plots the eigenvalues of a given matrix P
eval_plot <- function(P, mat_type=""){
# Check if we have a stack or singular matrix
if(nrow(P) == ncol(P)){
array <- eval_frame(P)
} else{
array <- P
}
# Plot parameters
r <- 1
r_ep <- r + 0.5
# Plot
ggplot(array) +
geom_point(aes(x = Re, y = Im, col = as.factor(p_sparsity))) +
labs(x = "Re", y = "Im", title = paste("Eigenvalues of ",mat_type," Matrix",sep = "")) +
xlim(-r_ep,r_ep) + ylim(-r,r) +
ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = r), color = "steelblue") +
scale_color_discrete(name = "Row_i") +
scale_x_continuous(name = "Re(r_i)") +
scale_y_continuous(name = "Im(r_i)") +
coord_fixed(ratio = 1) +
theme(legend.position = "none")
}
# Document parameters
M <- 4
it <- 1500
# Get initial stack for p = 0.9
stack <- evl_erdos(M, 0.99, it)
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(gganimate)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigenvectors.R")
source(file = "../R/simulate.R")
source(file = "../R/analyze.R")
# global parameters
bool_plot <- T
bool_loud <- T
bool_animate <- F
# General function
evl_erdos <- function(M,p,it){
# Generate initial matrix
set.seed(23)
P <- RM_erdos(M, p_sparse = p, stoch = T)
evals <- eval_frame(P)
# Attach p index
p_sparsity <- rep(as.factor(p), M)
# Main loop
evl_stack <- cbind(evals, p_sparsity)
for(i in 1:it){
P <- RM_erdos(4, p_sparse = p, stoch = T)
evl_stack <- rbind(evl_stack, cbind(eval_frame(P), p_sparsity))
}
evl_stack
}
## OVERWRITE FUNCTION
# Plots the eigenvalues of a given matrix P
eval_plot <- function(P, mat_type=""){
# Check if we have a stack or singular matrix
if(nrow(P) == ncol(P)){
array <- eval_frame(P)
} else{
array <- P
}
# Plot parameters
r <- 1
r_ep <- r + 0.5
# Plot
ggplot(array) +
geom_point(aes(x = Re, y = Im, col = as.factor(p_sparsity))) +
labs(x = "Re", y = "Im", title = paste("Eigenvalues of ",mat_type," Matrix",sep = "")) +
xlim(-r_ep,r_ep) + ylim(-r,r) +
ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = r), color = "steelblue") +
scale_color_discrete(name = "Row_i") +
scale_x_continuous(name = "Re(r_i)") +
scale_y_continuous(name = "Im(r_i)") +
coord_fixed(ratio = 1) +
theme(legend.position = "none")
}
# Document parameters
M <- 4
it <- 1500
# Get initial stack for p = 0.9
stack <- evl_erdos(M, 0.99, it)
# Iteratively stack various probabilities
stack <- rbind(stack, evl_erdos(M, 0.98, it))
stack <- rbind(stack, evl_erdos(M, 0.95, it))
stack <- rbind(stack, evl_erdos(M, 0.9, it))
stack <- rbind(stack, evl_erdos(M, 0.8, it))
stack <- rbind(stack, evl_erdos(M, 0.7, it))
stack <- rbind(stack, evl_erdos(M, 0.5, it))
stack <- rbind(stack, evl_erdos(M, 0.3, it))
stack <- rbind(stack, evl_erdos(M, 0.1, it))
stack <- rbind(stack, evl_erdos(M, 0.05, it))
stack <- rbind(stack, evl_erdos(M, 0.03, it))
stack <- rbind(stack, evl_erdos(M, 0.01, it))
eval_scatter <- eval_plot(stack, mat_type = "Erdos-Renyi")
# Filter eigenvalues with noncomplex components
filtered <- stack[abs(stack[,1]) > 0,]
filtered <- filtered[abs(filtered[,1]) != 1,]
eval_hist1 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Re, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Real Component of Nontrivial Eigenvalues")
eval_hist2 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Im, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Complex Component of Nontrivial Eigenvalues")
eval_hist1/eval_hist2
# Filter eigenvalues with noncomplex components
filtered <- stack[abs(stack[,1]) > 0,]
filtered <- filtered[abs(filtered[,1]) != 1,]
filtered <- filtered[abs(filtered[,2]) != 0,]
eval_hist1 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Re, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Real Component of Nontrivial Eigenvalues")
eval_hist2 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Im, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Complex Component of Nontrivial Eigenvalues")
eval_hist1/eval_hist2
# Filter eigenvalues with noncomplex components
filtered <- stack[abs(stack[,1]) > 0,]
filtered <- filtered[abs(filtered[,1]) != 1,]
#filtered <- filtered[abs(filtered[,2]) != 0,]
eval_hist1 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Re, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Real Component of Nontrivial Eigenvalues")
eval_hist2 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Im, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Complex Component of Nontrivial Eigenvalues")
eval_hist1/eval_hist2
# Filter eigenvalues with noncomplex components
filtered <- stack[abs(stack[,1]) > 0,]
filtered <- filtered[abs(filtered[,1]) != 1,]
filtered <- filtered[abs(filtered[,2]) != 0,]
eval_hist1 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Re, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Real Component of Nontrivial Eigenvalues")
eval_hist2 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Im, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Complex Component of Nontrivial Eigenvalues")
eval_hist1/eval_hist2
eval_hist1 + transition_states(states = p_sparsity)
eval_hist1 + transition_states(states = p_sparsity, state_length = 1, transition_length = 1, wrap = T)
eval_hist1 + transition_states(states = p_sparsity, state_length = 1, transition_length = 1, wrap = T)
eval_hist1 + transition_states(states = p_sparsity, state_length = 1, transition_length = 1, wrap = T)
real_anim <- eval_hist1 + transition_states(states = p_sparsity, state_length = 1, transition_length = 1, wrap = T)
real_anim <- eval_hist1 + transition_states(states = p_sparsity, state_length = 1, transition_length = 1, wrap = T)
real_anim
real_anim <- eval_hist1 + transition_states(states = p_sparsity, state_length = 0.25, wrap = FALSE)
real_anim
real_anim <- eval_hist1 + transition_states(states = p_sparsity, transition_length = 0.25, wrap = FALSE)
real_anim
real_anim <- eval_hist1 + transition_states(states = p_sparsity, transition_length = 0.05, wrap = FALSE)
real_anim
real_anim <- eval_hist1 + transition_states(states = p_sparsity, state_length = 0.05, transition_length = 0.05, wrap = FALSE)
real_anim
anim_save(animation = real_anim, filename = "real_ev.gif")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(ggfortify)
library(matrixcalc)
library(zeallot)
library(gganimate)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigenvectors.R")
source(file = "../R/simulate.R")
# Duplicate of simulate but with animation friendly version of functions
source(file = "../R/analyze.R")
# global parameters
bool_plot <- T
bool_loud <- F
bool_animate <- F
################################
### Step 0: Setup the matrix ###
################################
# Set seed
set.seed(23)
# Set parameters
M <- 4
# Generate matrix
P <- RM_stoch(M, symm = T, sparsity = F)
if(bool_loud){P}
################################
#### Step 1: Get the batch ####
################################
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
if(bool_loud){head(batch)}
##################################
#### Step 2: Evolve the batch ####
##################################
# Set evolution parameters
steps <- 10
# Evolve and index batch
evolved_batch <- evolve_batch(batch, steps, with_steps = T)
# Index the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
if(bool_loud){head(evolved_batch)}
####################################
#### Step 3: Animate the batch! ####
####################################
# Plot the evolution arrays of the batch elements
batch_data1 <- evolved_batch
batch_scatterplot1 <- batch_2d_plot(batch_data1)
# Add transition time
batch_animation1 <- batch_scatterplot1 + transition_time(time = time)
# Set me to true!
bool_animate <- T
if(bool_animate){batch_animation1}
anim_save(batch_animation1, "stochastic.gif")
anim_save(animation = batch_animation1, "stochastic.gif")
batch_2d_customplot(batch_data = time_array(batch_data1, at_time = 0), 1,2)
real_anim <- eval_hist2 + transition_states(states = p_sparsity, state_length = 0.05, transition_length = 0.05, wrap = FALSE)
#real_anim
anim_save(animation = real_anim, filename = "complex_ev.gif")
eval_hist1 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Re, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Real Component of Nontrivial Eigenvalues")
eval_hist2 <- ggplot(data = filtered) +
geom_histogram(mapping = aes(x = Im, fill = as.factor(p_sparsity))) +
labs(fill = "Sparsity", title = "Complex Component of Nontrivial Eigenvalues")
eval_hist2
is.na(T)
is.na(F)
is.na(NA)
