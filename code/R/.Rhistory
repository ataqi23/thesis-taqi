batch_data <- evolved_batch
# 2d plot
batch_2d_plot(batch_data, "(Symmetric Stochastic Matrix)")
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
head(batch)
# Set evolution parameters
steps <- 20
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
head(batch_)
# Set evolution parameters
steps <- 20
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
head(batch)
# Set evolution parameters
steps <- 20
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
head(evolved_batch)
# Set evolution parameters
steps <- 20
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
# Add indexing to the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
head(evolved_batch)
# Set evolution parameters
steps <- 20
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
# Add indexing to the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
head(evolved_batch)
tail(evolved_batch)
View(evolved_batch)
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(numDeriv)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/simulate.R")
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(numDeriv)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/simulate.R")
# global parameters
bplot <- F
loud <- F
# Set seed
set.seed(23)
symm <- T
# Set parameters
M <- 3
# Generate matrix
P <- RM_stoch(M, symm, sparsity = F)
set.seed(23)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
# Set evolution parameters
steps <- 5
# Evolve batch
evolved_batch <- evolve_batch(batch, steps, burn_in = 2)
# Add indexing to the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
View(evolved_batch)
source('~/Developer/thesis-taqi/simulate_ev/R/simulate.R')
extr <- extract_evol_array
extr <- extract_evol_array
extr(evolved_batch, 1)
source('~/Developer/thesis-taqi/simulate_ev/R/simulate.R')
extr <- extract_evol_array
extr(evolved_batch, 1)
# Set seed
set.seed(23)
symm <- T
# Set parameters
M <- 3
# Generate matrix
P <- RM_stoch(M, symm, sparsity = F)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
# Set evolution parameters
steps <- 10
# Evolve batch
evolved_batch <- evolve_batch(batch, steps, burn_in = 2)
# Add indexing to the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
extr <- extract_evol_array
extr(evolved_batch, 1)
# Set seed
set.seed(23)
symm <- T
# Set parameters
M <- 3
# Generate matrix
P <- RM_stoch(M, symm, sparsity = F)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
# Set evolution parameters
steps <- 15
# Evolve batch
evolved_batch <- evolve_batch(batch, steps, burn_in = 2)
# Add indexing to the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
extr <- extract_evol_array
extr(evolved_batch, 1)
# Set seed
set.seed(23)
symm <- T
# Set parameters
M <- 3
# Generate matrix
P <- RM_stoch(M, symm, sparsity = F)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
# Set evolution parameters
steps <- 50
# Evolve batch
evolved_batch <- evolve_batch(batch, steps, burn_in = 4)
# Add indexing to the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
extr <- extract_evol_array
extr(evolved_batch, 1)
# Set seed
set.seed(23)
symm <- T
# Set parameters
M <- 3
# Generate matrix
P <- RM_stoch(M, symm, sparsity = F)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
# Set evolution parameters
steps <- 50
# Evolve batch
evolved_batch <- evolve_batch(batch, steps, burn_in = 30)
# Add indexing to the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
extr <- extract_evol_array
extr(evolved_batch, 1)
extr <- extract_evol_array
extr(evolved_batch, 1)
P
# Set seed
set.seed(23)
# Set parameters
M <- 2
mu <- 0
sd <- 1
# Generate matrix
P <- RM_stoch(M, symm = T, sparsity = F)
P
P
eigen_frame(P)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
head(batch)
# Set seed
set.seed(23)
# Set parameters
M <- 2
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(23)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
P
eigen_frame(P)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
head(batch)
# Set evolution parameters
steps <- 20
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
# Add indexing to the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
head(evolved_batch)
tail(evolved_batch)
# Plot the evolution arrays of the batch elements
batch_data <- evolved_batch
# 3d plot
batch_3d_plot(batch_data, "(Symmetric Normal Matrix)")
source('~/Developer/thesis-taqi/simulate_ev/R/simulate.R')
# Plot the evolution arrays of the batch elements
batch_data <- evolved_batch
# 3d plot
batch_3d_plot(batch_data, "(Symmetric Normal Matrix)")
source('~/Developer/thesis-taqi/simulate_ev/R/simulate.R')
# Plot the evolution arrays of the batch elements
batch_data <- evolved_batch
# 3d plot
batch_3d_plot(batch_data, "(Symmetric Normal Matrix)")
source('~/Developer/thesis-taqi/simulate_ev/R/simulate.R')
# Plot the evolution arrays of the batch elements
batch_data <- evolved_batch
# 3d plot
batch_3d_plot(batch_data, "(Symmetric Normal Matrix)")
# Set seed
set.seed(24)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(26)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(27)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
# Set seed
set.seed(27)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Plot the evolution arrays of the batch elements
batch_data <- evolved_batch
# 3d plot
batch_3d_plot(batch_data, "(Symmetric Normal Matrix)")
# Set seed
set.seed(257)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(247)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(247)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(3)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(4)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(5)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(6)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(6)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
P
# Set seed
set.seed(23)
# Set parameters
M <- 2
mu <- 0
sd <- 1
# Generate matrix
P <- RM_stoch(M, symm = T, sparsity = F)
P
# Set seed
set.seed(23)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_stoch(M, symm = T, sparsity = F)
P
# Set seed
set.seed(3)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_stoch(M, symm = T, sparsity = F)
P
# Set seed
set.seed(23)
# Set parameters
M <- 2
mu <- 0
sd <- 1
# Generate matrix
P <- RM_stoch(M, symm = T, sparsity = F)
P
eigen_frame(P)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
head(batch)
# Set evolution parameters
steps <- 20
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
# Add indexing to the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
head(evolved_batch)
tail(evolved_batch)
# Plot the evolution arrays of the batch elements
batch_data <- evolved_batch
# 2d plot
batch_2d_plot(batch_data, "(Symmetric Stochastic Matrix)")
# Set seed
set.seed(6)
# Set parameters
M <- 3
mu <- 0
sd <- 1
# Generate matrix
P <- RM_normal(M, c(mu,sd), symm = T)
### Eigenvalues of the Symmetric Normal Matrix
```{r}
P
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
head(batch)
# Set evolution parameters
steps <- 20
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
# Add indexing to the batch
evolved_batch <- indexed_batch(evolved_batch, steps)
head(evolved_batch)
tail(evolved_batch)
# Plot the evolution arrays of the batch elements
batch_data <- evolved_batch
# 3d plot
batch_3d_plot(batch_data, "(Symmetric Normal Matrix)")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(ggfortify)
library(matrixcalc)
library(zeallot)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/simulate.R")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(ggfortify)
library(matrixcalc)
library(zeallot)
# Load files
source(file = "R/matrices.R")
source(file = "R/eigenvectors.R")
source(file = "R/simulate.R")
set.seed(27)
P <- RM_stoch(3, symm = T, sparsity = T)
View(P)
set.seed(27)
P <- RM_stoch(3, symm = T, sparsity = T)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
# Set evolution parameters
steps <- 20
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
set.seed(27)
P <- RM_stoch(3, symm = T, sparsity = T)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
# Set evolution parameters
steps <- 20
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
evolved_batch <- indexed_batch(evolved_batch, steps)
batch_2d_plot(evolved_batch)
set.seed(27)
P <- RM_stoch(3, symm = T, sparsity = T)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
# Set evolution parameters
steps <- 7
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
evolved_batch <- indexed_batch(evolved_batch, steps)
batch_2d_plot(evolved_batch)
set.seed(27)
P <- RM_stoch(3, symm = T, sparsity = T)
# Set batch parameters
B <- 100
# Create batch
batch <- make_batch(M = M, B = B)
# Set evolution parameters
steps <- 10
# Evolve batch
evolved_batch <- evolve_batch(batch, steps)
evolved_batch <- indexed_batch(evolved_batch, steps)
batch_2d_plot(evolved_batch)
batch_3d_plot(evolved_batch)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
labs <- data.frame(g = c(9.5/10, 26/29, 22.5/24, 22/24,16/20,17/20,22/23,18/18,24/26,16.5/20), idx = 1:10)
mean(labs$g)
labs_dropped <- labs %>% filter(g != min(g))
mean(labs_dropped$g)
