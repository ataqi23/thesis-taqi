dir_path <- paste(path_prefix,"../R/", sep = "", collapse = "")
# Get script paths
script_paths <- dir(path = dir_path, pattern = "\\.R$")
script_paths <- purrr::map_chr(script_files, function(filename, dirpath){paste(dirpath, filename, "", "")}, dir_path)
# Get script file names and get their path
script_files <- dir(path = dir_path, pattern = "\\.R$")
script_paths <- purrr::map_chr(script_files, function(filename, dirpath){paste(dirpath, filename, "", "")}, dir_path)
script_paths <- purrr::map_chr(script_files, function(filename, dirpath){paste(dirpath, filename, "|")}, dir_path)
script_paths <- purrr::map_chr(script_files, function(filename, dirpath){paste(dirpath, filename, sep = "", "")}, dir_path)
source('~/Developer/thesis-taqi/R/header.R')
.src(depth = 1)
.src(depth = 2)
.src(depth = 0)
.src(depth = 1)
#
source(file = "../R/header.R")
.src(depth = 1)
script_paths <- as.list(purrr::map_chr(script_files, .ADDpref, dir_path))
#
source(file = "../R/header.R")
.src(depth = 1)
#
source(file = "../R/header.R")
.src(depth = 1)
source('~/Developer/thesis-taqi/R/header.R')
.src(depth = 1)
.src(depth = 1)
#
source(file = "../R/header.R")
.src(depth = 1)
.src(depth = 1)
```{r setup, include=FALSE, echo = F}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)
library(matrixcalc)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigen.R")
source(file = "../R/evolve.R")
source(file = "../R/analyze.R")
source(file = "../R/simulate.R")
source(file = "../R/ensemble.R")
source(file = "../R/vis.R")
#
source(file = "../R/header.R")
.src(depth = 1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)
library(matrixcalc)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigen.R")
source(file = "../R/evolve.R")
source(file = "../R/analyze.R")
source(file = "../R/simulate.R")
source(file = "../R/ensemble.R")
source(file = "../R/vis.R")
#
source(file = "../R/header.R")
.src(depth = 1)
source('~/Developer/thesis-taqi/R/header.R')
source('~/Developer/thesis-taqi/R/header.R')
ggplot2()
knitr::opts_chunk$set(echo = TRUE)
# Load libraries and files
source(file = "../R/header.R")
.src(depth = 1)
ggplot2()
source('~/Developer/thesis-taqi/R/header.R')
source('~/Developer/thesis-taqi/R/header.R')
knitr::opts_chunk$set(echo = TRUE)
# Load libraries and files
source(file = "../R/header.R")
.src(depth = 1)
ggplot()
ggplot2()
ggplot()
ggplot()
knitr::opts_chunk$set(echo = TRUE)
# Load libraries and files
source(file = "../R/header.R")
.src(depth = 1)
knitr::opts_chunk$set(echo = TRUE)
# Import dependencies
require(tidyverse)
require(matrixcalc)
# Load libraries and files
source(file = "../R/header.R")
.src(depth = 1)
knitr::opts_chunk$set(echo = TRUE)
# Import dependencies
require(tidyverse)
require(matrixcalc)
# Load libraries and files
source(file = "../R/header.R")
.src(depth = 1)
# Load libraries and files
source(file = "../../R/header.R")
.src(depth = 2)
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(matrixcalc)
# Load libraries and files
source(file = "../../R/header.R")
.src(depth = 2)
# global parameters
bool_plot <- F
bool_loud <- F
bool_animate <- F
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(matrixcalc)
# Load libraries and files
source(file = "../../R/header.R")
.src(depth = 2)
# global parameters
bool_plot <- F
bool_loud <- F
bool_animate <- F
#=======================
#         SETUP
#=======================
# Matrix parameters
n <- 4
mean <- 0
sd <- 2
# Batch parameters
batch_size <- 500
steps <- 45
epsilon <- 0.05
#==========================
#         SIMULATE
#==========================
set.seed(23)
# Generate a matrix
P <- RM_normal(n, mean, sd, symm = T)
#=======================
#         SETUP
#=======================
# Matrix parameters
n <- 4
mean <- 0
sd <- 2
# Batch parameters
batch_size <- 500
steps <- 45
epsilon <- 0.05
#==========================
#         SIMULATE
#==========================
set.seed(23)
# Generate a matrix
P <- RM_norm(n, mean, sd, symm = T)
P
# Evolve a batch
sim <- mixtime_sim(P, batch_size, steps, epsilon)
source('~/Developer/thesis-taqi/R/header.R')
source('~/Developer/thesis-taqi/R/header.R')
knitr::opts_chunk$set(echo = TRUE)
#devtools::install_github(repo = "ataqi23/RMAT", force = TRUE)
#library(RMAT)
?RM_norm
?RM_erdos
?RM_stoch
?RM_beta
#?RM_unif
#?RM_beta
#?RM_gmma
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center", fig.height = 4, message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load libraries and files
source(file = "../R/header.R")
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center", fig.height = 4, message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load libraries and files
source(file = "../../R/header.R")
.src(depth = 2)
# global parameters
bool_plot <- T
bool_loud <- F
bool_animate <- F
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load files
source(file = "../../R/header.R")
.src(depth = 2)
# global parameters
bool_plot <- F
bool_loud <- F
bool_animate <- F
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center", fig.height = 3.5, message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load files
source(file = "../../R/header.R")
.src(depth = 2)
# global parameters
bool_plot <- T
bool_loud <- F
bool_animate <- F
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center", message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(purrr)
# Load files
source(file = "../../R/header.R")
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center", message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(purrr)
# Load files
source(file = "../R/header.R")
.src(depth = 1)
# global parameters
bool_plot <- F
bool_loud <- T
bool_animate <- F
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load files
source(file = "../../R/header.R")
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(ggforce)
# Load files
source(file = "../../R/header.R")
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(ggforce)
# Load files
source(file = "../R/header.R")
.src(depth = 1)
# global parameters
bool_plot <- F
bool_loud <- F
bool_animate <- F
devtools::install_github(repo = "ataqi23/RMAT")
knitr::opts_chunk$set(echo = TRUE)
source("../R/header.R")
.src(1)
# Some random matrices and ensembles
P <- RM_norm(5, symm = T)
ens <- RME_unif(3, min = 0, max = 1, size = 5)
ensemble
.isHermitian(ensemble)
P
sortByNorm <- ifelse(.isHermitian(P), F, T)
sortByNorm
.isHermitian(P)
array <- ensemble
P <- if_else(class(array) == "list", array[[1]], array)
source('~/Developer/thesis-taqi/R/dispersion.R')
.parse_pairs("co", P)
.parse_pairs("consecutive", P)
valid_schemes <- c("largest, lower, upper, consecutive") # Valid schemes for printing if user is unaware of options
"consecutive" %in% valid_schemes
"largest" %in% valid_schemes
source('~/Developer/thesis-taqi/R/dispersion.R')
"largest" %in% valid_schemes
valid_schemes <- c("largest", "lower", "upper", "consecutive") # Valid schemes for printing if user is unaware of options
"largest" %in% valid_schemes
.parse_pairs("consecutive", P)
.parse_pairs(NA, P)
.parse_pairs("aa", P)
source('~/Developer/thesis-taqi/R/dispersion.R')
.parse_pairs("aa", P)
source('~/Developer/thesis-taqi/R/dispersion.R')
.parse_pairs("aa", P)
source('~/Developer/thesis-taqi/R/dispersion.R')
source('~/Developer/thesis-taqi/R/dispersion.R')
.parse_pairs("aa", P)
source('~/Developer/thesis-taqi/R/dispersion.R')
source('~/Developer/thesis-taqi/R/dispersion.R')
.parse_pairs("aa", P)
paste("Invalid pair scheme input. Try one of the following: ",valid_schemes,".",collapse = "", sep = "")
paste("Invalid pair scheme input. Try one of the following: ",valid_schemes,".",collapse = " ", sep = "")
paste("Invalid pair scheme input. Try one of the following: ",valid_schemes,".",collapse = "")
source('~/Developer/thesis-taqi/R/dispersion.R')
.parse_pairs("aa", P)
source('~/Developer/thesis-taqi/R/dispersion.R')
.parse_pairs("aa", P)
source('~/Developer/thesis-taqi/R/dispersion.R')
.parse_pairs("aa", P)
source('~/Developer/thesis-taqi/R/dispersion.R')
.parse_pairs("aa", P)
source('~/Developer/thesis-taqi/R/dispersion.R')
.parse_pairs("aa", P)
source('~/Developer/thesis-taqi/R/dispersion.R')
P <- RM_beta(5, 4)
P %>% dispersion()
source('~/Developer/thesis-taqi/R/dispersion.R')
P <- RM_beta(5, 4)
P %>% dispersion()
source('~/Developer/thesis-taqi/R/dispersion.R')
P %>% spectrum()
P <- RM_norm(5, symm = F)
P %>% spectrum()
P <- RM_norm(5, symm = F)
P %>% spectrum()
P <- RM_norm(5, symm = F)
P %>% spectrum()
P <- RM_norm(5, symm = F)
P %>% spectrum()
P <- RM_norm(5, symm = F)
P %>% spectrum()
P <- RM_norm(5, symm = T)
P %>% spectrum()
P <- RM_norm(5, symm = T)
P %>% spectrum()
P <- RM_norm(5, symm = T)
P %>% spectrum()
source('~/Developer/thesis-taqi/R/dispersion.R')
P <- RM_beta(5, 4)
P <- RM_norm(5, symm = T)
P %>% spectrum()
P %>% dispersion()
source('~/Developer/thesis-taqi/R/dispersion.R')
source('~/Developer/thesis-taqi/R/dispersion.R')
P <- RM_beta(5, 4)
P <- RM_norm(5, symm = T)
P %>% spectrum()
P %>% dispersion()
source('~/Developer/thesis-taqi/R/spectrum.R')
source('~/Developer/thesis-taqi/R/dispersion.R')
P <- RM_beta(5, 4)
P <- RM_norm(5, symm = T)
P %>% spectrum()
P %>% dispersion()
source('~/Developer/thesis-taqi/R/dispersion.R')
P <- RM_beta(5, 4)
P <- RM_norm(5, symm = T)
P %>% spectrum()
P %>% dispersion()
source('~/Developer/thesis-taqi/R/dispersion.R')
P <- RM_beta(5, 4)
P <- RM_norm(5, symm = T)
P %>% spectrum()
P %>% dispersion()
source('~/Developer/thesis-taqi/R/spectrum.R')
source('~/Developer/thesis-taqi/R/dispersion.R')
source('~/Developer/thesis-taqi/R/spectrum.R')
P <- RM_beta(5, 4)
P <- RM_norm(5, symm = T)
P %>% spectrum()
P %>% dispersion()
source('~/Developer/thesis-taqi/R/spectrum.R')
spectrum_array <- spectrum(array)
spectrum_array <- spectrum(array)
# Get the master summary "eigen-plot" for a matrix or ensemble
eigen_plot <- function(array){
spectrum_array <- spectrum(array)
dispersion_array <- dispersion(array)
spectrum_scatter <- spectrum_array %>% spectrum.scatterplot()
dispersion_hist <- dispersion_array %>% dispersion.histogram()
dispersion_scatter <- dispersion_array %>% dispersion.scatterplot()
list(spectrum_scatter,dispersion_hist,dispersion_scatter,spectrum_array,dispersion_array)
}
eigen_plotP <- eigen_plot(P)
View(eigen_plotP)
# Get the master summary "eigen-plot" for a matrix or ensemble
eigen_plot <- function(array, retArrays = F){
spectrum_array <- spectrum(array)
dispersion_array <- dispersion(array)
spectrum_scatter <- spectrum_array %>% spectrum.scatterplot()
dispersion_hist <- dispersion_array %>% dispersion.histogram()
dispersion_scatter <- dispersion_array %>% dispersion.scatterplot()
if(retArrays){list(spectrum_scatter,dispersion_hist,dispersion_scatter,spectrum_array,dispersion_array)}
else{list(spectrum_scatter,dispersion_hist,dispersion_scatter)}
}
P <- RM_beta(5, 4)
eigen_plotP <- eigen_plot(P)
eigen_plotP
P %>% dispersion()
source('~/Developer/thesis-taqi/R/dispersion.R')
P %>% dispersion()
P <- RM_beta(5, 4)
eigen_plotP <- eigen_plot(P)
# Get the master summary "eigen-plot" for a matrix or ensemble
eigen_plot <- function(array, retArrays = F){
spectrum_array <- spectrum(array)
dispersion_array <- dispersion(array)
spectrum_scatter <- spectrum_array %>% spectrum.scatterplot()
dispersion_hist <- dispersion_array %>% dispersion.histogram(metric = "id_diff_norm")
dispersion_scatter <- dispersion_array %>% dispersion.scatterplot()
if(retArrays){list(spectrum_scatter,dispersion_hist,dispersion_scatter,spectrum_array,dispersion_array)}
else{list(spectrum_scatter,dispersion_hist,dispersion_scatter)}
}
P %>% dispersion()
P <- RM_beta(5, 4)
eigen_plotP <- eigen_plot(P)
eigen_plotP
P %>% spectrum.scatterplot()
P %>% spectrum.histogram()
P %>% dispersion()
source('~/Developer/thesis-taqi/R/dispersion.R')
P %>% dispersion()
P %>% spectrum.histogram()
P <- RM_beta(5, 4)
eigen_plotP <- eigen_plot(P)
eigen_plotP
#P <- RM_norm(5, symm = T)
source('~/Developer/thesis-taqi/R/dispersion.R')
P %>% dispersion()
P %>% spectrum.histogram()
P <- RM_beta(5, 4)
eigen_plotP <- eigen_plot(P)
eigen_plotP
#P <- RM_norm(5, symm = T)
# Simulate P and look at statistics
P <- RME_beta(25, beta = 4, size = 500)
# Simulate P and look at statistics
P <- RME_beta(25, beta = 4, size = 500)
P %>% dispersion()
# Simulate P and look at statistics
P <- RME_beta(25, beta = 4, size = 500)
#P %>% dispersion()
P %>% spectrum.histogram()
# Simulate P and look at statistics
P <- RME_beta(25, beta = 4, size = 100)
#P %>% dispersion()
P %>% spectrum.histogram()
# Get plots
eigen_plotP <- eigen_plot(P)
eigen_plotP
#P <- RM_norm(5, symm = T)
# Get the master summary "eigen-plot" for a matrix or ensemble
spectral_plots <- function(array, metric = "id_diff", retArrays = F){
spectrum_array <- spectrum(array)
dispersion_array <- dispersion(array)
spectrum_scatter <- spectrum_array %>% spectrum.scatterplot()
dispersion_hist <- dispersion_array %>% dispersion.histogram(metric = metric)
dispersion_scatter <- dispersion_array %>% dispersion.scatterplot()
if(retArrays){list(spectrum_scatter,dispersion_hist,dispersion_scatter,spectrum_array,dispersion_array)}
else{list(spectrum_scatter,dispersion_hist,dispersion_scatter)}
}
# Simulate P and look at statistics
P <- RME_beta(25, beta = 4, size = 100)
#P %>% dispersion()
P %>% spectrum.histogram()
# Get plots
spectral_plots(P)
# Get plots
spectral_plots(P, metric = "diff_abs")
# Get plots
spectral_plots(P, metric = "abs_diff")
# Get the master summary "eigen-plot" for a matrix or ensemble
spectral_plots <- function(array, pair_scheme = "lower_tri", disp_metric = "diff_abs", retArrays = F){
spectrum_array <- spectrum(array)
dispersion_array <- dispersion(array, pairs = pair_scheme)
spectrum_scatter <- spectrum_array %>% spectrum.scatterplot()
dispersion_hist <- dispersion_array %>% dispersion.histogram(metric = disp_metric)
dispersion_scatter <- dispersion_array %>% dispersion.scatterplot()
if(retArrays){list(spectrum_scatter,dispersion_hist,dispersion_scatter,spectrum_array,dispersion_array)}
else{list(spectrum_scatter,dispersion_hist,dispersion_scatter)}
}
# Get the master summary "eigen-plot" for a matrix or ensemble
spectral_plots <- function(array, pair_scheme = "largest", disp_metric = "diff_abs", retArrays = F){
spectrum_array <- spectrum(array)
dispersion_array <- dispersion(array, pairs = pair_scheme)
spectrum_scatter <- spectrum_array %>% spectrum.scatterplot()
dispersion_hist <- dispersion_array %>% dispersion.histogram(metric = disp_metric)
dispersion_scatter <- dispersion_array %>% dispersion.scatterplot()
if(retArrays){list(spectrum_scatter,dispersion_hist,dispersion_scatter,spectrum_array,dispersion_array)}
else{list(spectrum_scatter,dispersion_hist,dispersion_scatter)}
}
# Simulate P and look at statistics
P <- RME_beta(25, beta = 4, size = 100)
#P %>% dispersion()
P %>% spectrum.histogram()
# Get plots
spectral_plots(P, disp_metric = "abs_diff")
