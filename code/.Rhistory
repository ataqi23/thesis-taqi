ggplot(array) +
geom_circle(mapping = aes(x0 = x0, y0 = y0, r = r), data = circle, color = color0) +
geom_point(data = array, aes(x = Re, y = Im, color = Re), alpha = 0.75) +
scale_color_continuous(type = "viridis", rainbow.color) +
theme(legend.position = "none") +
labs(x = "Re", y = "Im", title = paste("Spectrum of an ",mat_type,"Ensemble",sep = "")) #+
# Plots the eigenvalues of a given matrix P
spectrum_plot <- function(P, mat_type=""){
# Check if we have a stack of matrices or singular matrix
if(nrow(P) == ncol(P)){
array <- spectrum(P)
} else{array <- P}
# Plot parameters
r <- 1
x_window <- 0.5
x_range <- c(-(r + x_window), (r + x_window)) # Widen the width of the plot
circle <- data.frame(x0 = 0, y0 = 0, r = r)
# Color plot parameters
color0 <- "steelblue"
color1 <- "deepskyblue3"
# Plot
ggplot(array) +
geom_circle(mapping = aes(x0 = x0, y0 = y0, r = r), data = circle, color = color0) +
geom_point(data = array, aes(x = Re, y = Im, color = Re), alpha = 0.75) +
scale_color_continuous(type = "viridis", rainbow.color) +
theme(legend.position = "none") +
labs(x = "Re", y = "Im", title = paste("Spectrum of an ",mat_type,"Ensemble",sep = "")) #+
#xlim(x_range) +
#ylim(-r,r) +
#coord_fixed(ratio = 1)
}
ensemble <- RM_ensemble(RM_normal, args = list(n = 100, mean = 0, sd = 1, symm = F, complex = T, hermitian = F), size = 50)
ens_spectrum <- ensemble_spectrum(ensemble = ensemble)
spectrum_plot(ens_spectrum)
# Plots the eigenvalues of a given matrix P
spectrum_plot <- function(P, mat_type=""){
# Check if we have a stack of matrices or singular matrix
if(nrow(P) == ncol(P)){
array <- spectrum(P)
} else{array <- P}
# Plot parameters
r <- 1
x_window <- 0.5
x_range <- c(-(r + x_window), (r + x_window)) # Widen the width of the plot
circle <- data.frame(x0 = 0, y0 = 0, r = r)
# Color plot parameters
color0 <- "steelblue"
color1 <- "deepskyblue3"
# Plot
ggplot(array) +
geom_circle(mapping = aes(x0 = x0, y0 = y0, r = r), data = circle, color = color0) +
geom_point(data = array, aes(x = Re, y = Im, color = Re), alpha = 0.75) +
scale_color_continuous(type = "viridis") +
theme(legend.position = "none") +
labs(x = "Re", y = "Im", title = paste("Spectrum of an ",mat_type,"Ensemble",sep = "")) #+
#xlim(x_range) +
#ylim(-r,r) +
#coord_fixed(ratio = 1)
}
ensemble <- RM_ensemble(RM_normal, args = list(n = 100, mean = 0, sd = 1, symm = F, complex = T, hermitian = F), size = 50)
ens_spectrum <- ensemble_spectrum(ensemble = ensemble)
spectrum_plot(ens_spectrum)
ensemble <- RM_ensemble(RM_normal, args = list(n = 100, mean = 0, sd = 1, symm = F, complex = T, hermitian = T), size = 50)
ens_spectrum <- ensemble_spectrum(ensemble = ensemble)
spectrum_plot(ens_spectrum)
View(ensemble)
View(ens_spectrum)
ensemble <- RM_ensemble(RM_normal, args = list(n = 100, mean = 0, sd = 1, symm = F, complex = T, hermitian = F), size = 50)
ens_spectrum <- ensemble_spectrum(ensemble = ensemble)
spectrum_plot(ens_spectrum)
ensemble <- RM_ensemble(RM_normal, args = list(n = 100, mean = 0, sd = 1, symm = F, complex = T, hermitian = T), size = 50)
ens_spectrum <- ensemble_spectrum(ensemble = ensemble)
spectrum_plot(ens_spectrum)
source('~/Developer/thesis-taqi/R/eigen.R')
# Plots the eigenvalues of a given matrix P
spectrum_plot <- function(P, mat_type=""){
# Check if we have a stack of matrices or singular matrix
if(nrow(P) == ncol(P)){
array <- spectrum(P)
} else{array <- P}
# Plot parameters
r <- 1
x_window <- 0.5
x_range <- c(-(r + x_window), (r + x_window)) # Widen the width of the plot
circle <- data.frame(x0 = 0, y0 = 0, r = r)
# Color plot parameters
color0 <- "steelblue"
color1 <- "deepskyblue3"
# Plot
ggplot(array) +
geom_circle(mapping = aes(x0 = x0, y0 = y0, r = r), data = circle, color = color0) +
geom_point(data = array, aes(x = Re, y = Im, color = Re), alpha = 0.75) +
scale_color_continuous(type = "viridis") +
theme(legend.position = "none") +
labs(x = "Re", y = "Im", title = paste("Spectrum of an ",mat_type,"Ensemble",sep = "")) #+
#xlim(x_range) +
#ylim(-r,r) +
#coord_fixed(ratio = 1)
}
source('~/Developer/thesis-taqi/R/eigen.R')
ensemble <- RM_ensemble(RM_normal, args = list(n = 100, mean = 0, sd = 1, symm = F, complex = T, hermitian = F), size = 50)
ens_spectrum <- ensemble_spectrum(ensemble = ensemble)
spectrum_plot(ens_spectrum)
ensemble <- RM_ensemble(RM_normal, args = list(n = 100, mean = 0, sd = 1, symm = F, complex = T, hermitian = T), size = 50)
ens_spectrum <- ensemble_spectrum(ensemble = ensemble)
spectrum_plot(ens_spectrum)
GEB_spectrum <- function(N, beta, complex, size){
spec <- ensemble_spectrum(ensemble = RM_ensemble(RM_beta, args = list(N, beta, complex), size))
spectrum_plot(spec)
}
GEB_spectrum(N = 5, beta = 4, complex = F, size = 10)
# Parameters
size <- 5
N <- 5
beta <- 100
complex <- F
# Ensemble spectrum
ensemble <- RM_ensemble(RM_beta, args = list(N, beta, complex), size = 1000)
ens_spectrum <- ensemble_spectrum(ensemble = ensemble)
spectrum_plot(ens_spectrum)
GEB_spectrum(N = 5, beta = 4, complex = T, size = 100)
GEB_spectrum(N = 10, beta = 4, complex = T, size = 100)
GEB_spectrum(N = 100, beta = 4, complex = T, size = 100)
GEB_spectrum <- function(N, beta, complex, size){
spec <- ensemble_spectrum(ensemble = RM_ensemble(RM_beta, args = list(N, beta, complex), size))
spectrum_plot(spec)
}
# Set seed
set.seed(23)
GEB_spectrum(N = 5, beta = 4, complex = F, size = 100)
GEB_spectrum <- function(N, beta, complex, size){
spec <- ensemble_spectrum(ensemble = RM_ensemble(RM_beta, args = list(N, beta, complex), size))
spectrum_plot(spec)
}
# Set seed
set.seed(23)
GEB_spectrum(N = 100, beta = 4, complex = F, size = 100)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
set.seed(23)
RM_normal(N=4,complex=T,hermitian = T)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)
library(matrixcalc)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigen.R")
source(file = "../R/evolve.R")
source(file = "../R/analyze.R")
source(file = "../R/simulate.R")
source(file = "../R/ensemble.R")
source(file = "../R/vis.R")
ensemble <- RME("norm",c(N = 20, 0, 1, F, T, T), ensemble_size = 1000)
spectrum(ensemble)
spectrum_plot(ensemble)
2*","
rep(",",2)
c(rep(",",2))
"," + ","
paths <- dir(pattern = "\\.csv$") # Get all .csv files in directory
paths
paths <- dir(path = "../R/",pattern = "\\.csv$")
paths <- dir(path = "../R/",pattern = "\\.R$")
paths <- dir(pattern = "\\.R$")
paths <- dir(pattern = "\\.R$")
paths <- dir(pattern = "\\.R$")
source_scripts <- function(depth = 1){
paths <- dir(pattern = "\\.R$")
}
paths <- dir(pattern = "\\.R$")
paths <- dir(path = "../R/", pattern = "\\.R$")
paths <- dir(path = "../R/", pattern = "\\.R$")
dir()
source('~/Developer/thesis-taqi/R/header.R')
source('~/Developer/thesis-taqi/R/header.R')
source('~/Developer/thesis-taqi/R/header.R')
source('~/Developer/thesis-taqi/R/header.R')
source(file = "../R/header.R")
.src(depth = 1)
source('~/Developer/thesis-taqi/R/header.R')
source('~/Developer/thesis-taqi/R/header.R')
paste(rep("a",2))
paste(rep("a",2),sep="")
paste(c(rep("a",2)),sep="")
paste("../","../R/")
paste("../","../R/",sep="")
do.call("paste",function(){"../"})
do.call("paste",1:2,function(){"../"})
do.call("paste",c("1","2"),function(){"../"})
do.call("paste",c("1","2"))
paste("A", 1:6, sep = "")
paste("foo", {}, "bar", collapse="|")
paste("foo", "bar", collapse="|")
paste("foo", "bar", collapse= NULL)
paste("../", "../R/", collapse= NULL)
paste("../", "../R/", sep = "",collapse= NULL)
paste(c(rep("a",2)),sep="",collapse = "|")
paste(c(rep("a",2)),sep="",collapse = "")
paste(c(rep("../",2)),sep="",collapse = "")
paste(c(rep("../",3)),sep="",collapse = "")
path_prefix <- paste(c(rep("../",depth-1)),sep="",collapse = "")
depth <- 1
path_prefix <- paste(c(rep("../",depth-1)),sep="",collapse = "")
path <- paste(path_prefix,"../R/", sep = "", collapse = "")
depth <- 2
path_prefix <- paste(c(rep("../",depth-1)), sep = "", collapse = "")
path <- paste(path_prefix,"../R/", sep = "", collapse = "")
# Get script paths
script_paths <- dir(path = dir_path, pattern = "\\.R$")
depth <- 1
# Get prefix based on directory depth for use in directories with variable depth
path_prefix <- paste(c(rep("../",depth-1)), sep = "", collapse = "")
dir_path <- paste(path_prefix,"../R/", sep = "", collapse = "")
# Get script paths
script_paths <- dir(path = dir_path, pattern = "\\.R$")
script_paths <- purrr::map_chr(script_files, function(filename, dirpath){paste(dirpath, filename, "", "")}, dir_path)
# Get script file names and get their path
script_files <- dir(path = dir_path, pattern = "\\.R$")
script_paths <- purrr::map_chr(script_files, function(filename, dirpath){paste(dirpath, filename, "", "")}, dir_path)
script_paths <- purrr::map_chr(script_files, function(filename, dirpath){paste(dirpath, filename, "|")}, dir_path)
script_paths <- purrr::map_chr(script_files, function(filename, dirpath){paste(dirpath, filename, sep = "", "")}, dir_path)
source('~/Developer/thesis-taqi/R/header.R')
.src(depth = 1)
.src(depth = 2)
.src(depth = 0)
.src(depth = 1)
#
source(file = "../R/header.R")
.src(depth = 1)
script_paths <- as.list(purrr::map_chr(script_files, .ADDpref, dir_path))
#
source(file = "../R/header.R")
.src(depth = 1)
#
source(file = "../R/header.R")
.src(depth = 1)
source('~/Developer/thesis-taqi/R/header.R')
.src(depth = 1)
.src(depth = 1)
#
source(file = "../R/header.R")
.src(depth = 1)
.src(depth = 1)
```{r setup, include=FALSE, echo = F}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)
library(matrixcalc)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigen.R")
source(file = "../R/evolve.R")
source(file = "../R/analyze.R")
source(file = "../R/simulate.R")
source(file = "../R/ensemble.R")
source(file = "../R/vis.R")
#
source(file = "../R/header.R")
.src(depth = 1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)
library(matrixcalc)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigen.R")
source(file = "../R/evolve.R")
source(file = "../R/analyze.R")
source(file = "../R/simulate.R")
source(file = "../R/ensemble.R")
source(file = "../R/vis.R")
#
source(file = "../R/header.R")
.src(depth = 1)
source('~/Developer/thesis-taqi/R/header.R')
source('~/Developer/thesis-taqi/R/header.R')
ggplot2()
knitr::opts_chunk$set(echo = TRUE)
# Load libraries and files
source(file = "../R/header.R")
.src(depth = 1)
ggplot2()
source('~/Developer/thesis-taqi/R/header.R')
source('~/Developer/thesis-taqi/R/header.R')
knitr::opts_chunk$set(echo = TRUE)
# Load libraries and files
source(file = "../R/header.R")
.src(depth = 1)
ggplot()
ggplot2()
ggplot()
ggplot()
knitr::opts_chunk$set(echo = TRUE)
# Load libraries and files
source(file = "../R/header.R")
.src(depth = 1)
knitr::opts_chunk$set(echo = TRUE)
# Import dependencies
require(tidyverse)
require(matrixcalc)
# Load libraries and files
source(file = "../R/header.R")
.src(depth = 1)
knitr::opts_chunk$set(echo = TRUE)
# Import dependencies
require(tidyverse)
require(matrixcalc)
# Load libraries and files
source(file = "../R/header.R")
.src(depth = 1)
# Load libraries and files
source(file = "../../R/header.R")
.src(depth = 2)
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(matrixcalc)
# Load libraries and files
source(file = "../../R/header.R")
.src(depth = 2)
# global parameters
bool_plot <- F
bool_loud <- F
bool_animate <- F
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(matrixcalc)
# Load libraries and files
source(file = "../../R/header.R")
.src(depth = 2)
# global parameters
bool_plot <- F
bool_loud <- F
bool_animate <- F
#=======================
#         SETUP
#=======================
# Matrix parameters
n <- 4
mean <- 0
sd <- 2
# Batch parameters
batch_size <- 500
steps <- 45
epsilon <- 0.05
#==========================
#         SIMULATE
#==========================
set.seed(23)
# Generate a matrix
P <- RM_normal(n, mean, sd, symm = T)
#=======================
#         SETUP
#=======================
# Matrix parameters
n <- 4
mean <- 0
sd <- 2
# Batch parameters
batch_size <- 500
steps <- 45
epsilon <- 0.05
#==========================
#         SIMULATE
#==========================
set.seed(23)
# Generate a matrix
P <- RM_norm(n, mean, sd, symm = T)
P
# Evolve a batch
sim <- mixtime_sim(P, batch_size, steps, epsilon)
source('~/Developer/thesis-taqi/R/header.R')
source('~/Developer/thesis-taqi/R/header.R')
knitr::opts_chunk$set(echo = TRUE)
#devtools::install_github(repo = "ataqi23/RMAT", force = TRUE)
#library(RMAT)
?RM_norm
?RM_erdos
?RM_stoch
?RM_beta
#?RM_unif
#?RM_beta
#?RM_gmma
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center", fig.height = 4, message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load libraries and files
source(file = "../R/header.R")
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center", fig.height = 4, message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load libraries and files
source(file = "../../R/header.R")
.src(depth = 2)
# global parameters
bool_plot <- T
bool_loud <- F
bool_animate <- F
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load files
source(file = "../../R/header.R")
.src(depth = 2)
# global parameters
bool_plot <- F
bool_loud <- F
bool_animate <- F
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center", fig.height = 3.5, message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load files
source(file = "../../R/header.R")
.src(depth = 2)
# global parameters
bool_plot <- T
bool_loud <- F
bool_animate <- F
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center", message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(purrr)
# Load files
source(file = "../../R/header.R")
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center", message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(purrr)
# Load files
source(file = "../R/header.R")
.src(depth = 1)
# global parameters
bool_plot <- F
bool_loud <- T
bool_animate <- F
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
# Load files
source(file = "../../R/header.R")
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(ggforce)
# Load files
source(file = "../../R/header.R")
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(gridExtra)
library(matrixcalc)
library(ggforce)
# Load files
source(file = "../R/header.R")
.src(depth = 1)
# global parameters
bool_plot <- F
bool_loud <- F
bool_animate <- F
devtools::install_github(repo = "ataqi23/RMAT")
