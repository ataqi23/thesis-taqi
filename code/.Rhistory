is_row_stochastic(P)
# Set seed
set.seed(23)
# Set parameters
M <- 3
p <- 0.2
# Generate matrix
P <- RM_erdos(M, p, stoch = T)
if(bloud){P}
is_row_stochastic(P)
is_symmetric(P)
if(bloud){P}
is_symmetric(P)
#visualize_normal_entries(P, normal_args)
if(bloud){P}
is_row_stochastic(P)
is_symmetric(P)
source('~/Developer/thesis-taqi/code/R/matrices.R')
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "/R/matrices.R")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "R/matrices.R")
bloud <- T
bplot <- T
source('~/Developer/thesis-taqi/code/R/matrices.R')
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "R/matrices.R")
bloud <- T
bplot <- T
RM_normal <- function(M, normal_args = c(0,1), symm = F){
# Extract parameters
mu <- normal_args[1]
sd <- normal_args[2]
# Create [M x M] transition matrix
P <- matrix(rep(NA, M * M), ncol = M)
# Generate rows
for(i in 1:M){
P[i,] <- rnorm(n = M, mean = mu, sd = sd)
}
# Make symmetric if prompted
if(symm == T){
P[lower.tri(P)] <- P[upper.tri(P)]
}
# Return the matrix
P
}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "R/matrices.R")
bloud <- T
bplot <- T
View(RM_normal)
RM_normal <- function(M, normal_args = c(0,1), symm = F){
# Extract parameters
mu <- normal_args[1]
sd <- normal_args[2]
# Create [M x M] transition matrix
P <- matrix(rep(NA, M * M), ncol = M)
# Generate rows
for(i in 1:M){
P[i,] <- rnorm(n = M, mean = mu, sd = sd)
}
# Make symmetric if prompted
if(symm == T){
P[lower.tri(P)] <- P[upper.tri(P)]
}
# Return the matrix
P
}
View(RM_normal)
RM_normal <- function(M, normal_args = c(0,1), symm = F){
# Extract parameters
mu <- normal_args[1]
sd <- normal_args[2]
# Create [M x M] transition matrix
P <- matrix(rep(NA, M * M), ncol = M)
# Generate rows
for(i in 1:M){
P[i,] <- rnorm(n = M, mean = mu, sd = sd)
}
# Make symmetric if prompted
if(symm == T){
P[lower.tri(P)] <- P[upper.tri(P)]
}
# Return the matrix
P
}
# Set seed
set.seed(23)
# Set parameters
M <- 4
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args, symm = T)
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
P[lower.tri(P)]
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "R/matrices.R")
bloud <- T
bplot <- T
RM_normal <- function(M, normal_args = c(0,1), symm = F){
# Extract parameters
mu <- normal_args[1]
sd <- normal_args[2]
# Create [M x M] transition matrix
P <- matrix(rep(NA, M * M), ncol = M)
# Generate rows
for(i in 1:M){
P[i,] <- rnorm(n = M, mean = mu, sd = sd)
}
# Make symmetric if prompted
if(symm == T){
P[lower.tri(P)] <- P[upper.tri(P)]
}
# Return the matrix
P
}
# Set seed
set.seed(23)
# Set parameters
M <- 4
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
# Set seed
set.seed(23)
# Set parameters
M <- 4
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args, symm = T)
P[lower.tri(P)]
P[lower.tri(P)] == P[upper.tri(P)]
# Set seed
set.seed(23)
# Set parameters
M <- 3
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args, symm = T)
P[lower.tri(P)] == P[upper.tri(P)]
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
# Set seed
set.seed(23)
# Set parameters
M <- 10
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args, symm = T)
P[lower.tri(P)] == P[upper.tri(P)]
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
P[lower.tri(P)] == P[upper.tri(P)]
diag(P) == P[lower.tri(P)]
P[lower.tri(P)] == P[upper.tri(P)]
diag(P) == P[upper.tri(P)]
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
# Set seed
set.seed(23)
# Set parameters
M <- 5
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args, symm = T)
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
# Set seed
set.seed(23)
# Set parameters
M <- 4
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "R/matrices.R")
bloud <- T
bplot <- T
bloud <- F
bplot <- T
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "R/matrices.R")
bloud <- F
bplot <- T
# Set seed
set.seed(23)
# Set parameters
M <- 100
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "R/matrices.R")
bloud <- F
bplot <- T
# Set seed
set.seed(23)
# Set parameters
M <- 100
mu <- 8
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
bloud <- T
bplot <- T
# Set seed
set.seed(23)
# Set parameters
M <- 10
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
# Set seed
set.seed(23)
# Set parameters
M <- 10
mu <- 0
sd <- 4
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
sqrt(25)
# Set seed
set.seed(23)
# Set parameters
M <- 10
mu <- 0
sd <- 2
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "R/matrices.R")
bloud <- T
bplot <- T
# Set seed
set.seed(23)
# Set parameters
M <- 20
mu <- 0
sd <- 2
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
RM_normal <- function(M, normal_args = c(0,1), symm = F){
# Extract parameters
mu <- normal_args[1]
sd <- normal_args[2]
# Create [M x M] transition matrix
P <- matrix(rep(NA, M * M), ncol = M)
# Generate rows
for(i in 1:M){
P[i,] <- rnorm(n = M, mean = mu, sd = sd)
}
# Make symmetric if prompted
if(symm == T){
P[lower.tri(P)] <- P[upper.tri(P)]
}
# Return the matrix
P
}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "R/matrices.R")
bloud <- T
bplot <- T
# Set seed
set.seed(23)
# Set parameters
M <- 4
mu <- 0
sd <- 2
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
# Load files
source(file = "R/matrices.R")
bloud <- T
bplot <- T
# Set seed
set.seed(23)
# Set parameters
M <- 4
mu <- 0
sd <- 2
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
# Set seed
set.seed(23)
# Set parameters
M <- 6
mu <- 0
sd <- 2
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args = c(mu, sd), symm = F)
if(bloud){P}
is_symmetric(P)
if(bplot){visualize_normal_entries(P, normal_args)}
RM_normal <- function(M, normal_args = c(0,1), symm = F){
# Extract parameters
mu <- normal_args[1]
sd <- normal_args[2]
# Create [M x M] transition matrix
P <- matrix(rep(NA, M * M), ncol = M)
# Generate rows
for(i in 1:M){
P[i,] <- rnorm(n = M, mean = mu, sd = sd)
}
# Make symmetric if prompted
if(symm == T){
P[lower.tri(P)] <- P[upper.tri(P)]
}
# Return the matrix
P
}
# Set seed
set.seed(23)
# Set parameters
M <- 5
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args, symm = T)
# Set seed
set.seed(23)
# Set parameters
M <- 5
mu <- 0
sd <- 1
normal_args <- c(mu, sd)
# Generate matrix
P <- RM_normal(M, normal_args, symm = T)
if(bloud){P}
is_symmetric(P)
if(!bplot){visualize_normal_entries(P, normal_args)}
# Set seed
set.seed(23)
# Set parameters
M <- 7
# Generate matrix
P <- RM_stoch(M, symm = T, sparsity = T)
if(bloud){P}
is_row_stochastic(P)
is_symmetric(P)
if(bloud){P}
is_row_stochastic(P)
is_symmetric(P)
# Set seed
set.seed(23)
# Set parameters
M <- 5
# Generate matrix
P <- RM_stoch(M, symm = T, sparsity = T)
if(bloud){P}
is_row_stochastic(P)
is_symmetric(P)
upper.tri(P)
lower.tri(P)
lower.tri(P)[1]
lower.tri(P)[2]
lower.tri(P)[3]
lower.tri(P)[4]
lower.tri(P)[5]
lower.tri(P)
as.vector(lower.tri(P))
t(lower.tri(P))
(lower.tri(P))
as.vector(t(lower.tri(P)))
as.vector((lower.tri(P)))
as.vector(upper.tri(P))
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(ggfortify)
library(matrixcalc)
library(zeallot)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigenvectors.R")
source(file = "../R/eigenmetrics.R")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center",
message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(patchwork)
library(ggfortify)
library(matrixcalc)
library(zeallot)
# Load files
source(file = "../R/matrices.R")
source(file = "../R/eigenvectors.R")
source(file = "../R/eigenmetrics.R")
bool_plot <- T
bool_loud <- F
M <- 10
set.seed(23)
P <- RM_stoch(M, sparsity = T)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Stochastic")}
set.seed(23)
P <- RM_stoch(M, symm = T)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Symmetric Stochastic")}
set.seed(23)
P <- RM_normal(M, normal_args = c(0,1), symm = T)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Normal Symmetric")}
set.seed(23)
P <- RM_trid(M)
if(bool_plot){eigen_plot(P, loud = bool_loud, "Tridiagonal")}
